#pragma config(Hubs,  S1, HTMotor,  none,     none,     none)
#pragma config(Hubs,  S2, HTServo,  none,     none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S2,     ,               sensorI2CMuxController)
#pragma config(Sensor, S4,     gyro,           sensorI2CHiTechnicGyro)
#pragma config(Motor,  mtr_S1_C1_1,     frontRight,    tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C1_2,     frontLeft,     tmotorTetrix, openLoop, reversed)
#pragma config(Servo,  srvo_S2_C1_1,    graber,               tServoStandard)
#pragma config(Servo,  srvo_S2_C1_2,    servo2,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "JoystickDriver.c"
#include "DriverCM.h"
bool gyroed;
int servoVal = 0;

int speedCurve(int x)
{
	float speed = 0.0000216166*pow(x,3)+1.19001*pow(10,-18)*pow(x,2)+0.427083*x;
	return speed;
}

task main()
{
	calibrateGyro(gyro);
	while(true)
	{
		getJoystickSettings(joystick);

		/*Drive code*/
		motor[frontLeft] = speedCurve(joystick.joy1_y2);
		motor[frontRight] = speedCurve(joystick.joy1_y1);
		if(joy1Btn(3))
		{
			if(servoVal == 0)
			{
				servoVal += 10;
				servo[graber] = servoVal;	
			}
			else
			{
				servoVal -= 10;
				if(servoVal > 100)
				{
					servoVal = 100;	
				}
				servo[graber] = servoVal;					
			}
		}
		while(joystick.joy1_TopHat == 4)
		{
		getJoystickSettings(joystick);
		if(SensorValue(gyro) > offset)//turning right
		{
			motor[frontRight] = motor[frontRight] - 1;
		}
		if(SensorValue(gyro) < offset)//turning left
		{
			motor[frontLeft] = motor[frontLeft] - 1;
		}
		gyroed = true;
		}//end gyro code
		if(gyroed)
		{
			motor[frontLeft] = 1;
			motor[frontRight] = 1;
			gyroed = false;
		}
	}
}
