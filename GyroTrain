#pragma config(Hubs,  S1, HTServo,  HTMotor,  HTMotor,  HTMotor)
#pragma config(Hubs,  S2, HTMotor,  none,     none,     none)
#pragma config(Sensor, S3,     ir,             sensorHiTechnicIRSeeker1200)
#pragma config(Sensor, S4,     gyro,           sensorI2CHiTechnicGyro)
#pragma config(Motor,  motorA,          flap1,         tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  motorB,          flap2,         tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  mtr_S1_C2_1,     frontLeft,     tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor,  mtr_S1_C2_2,     backLeft,      tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C3_1,     frontRight,    tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C3_2,     backRight,     tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C4_1,     central,       tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C4_2,     winch,         tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S2_C1_1,     arm,           tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S2_C1_2,     motorK,        tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S1_C1_1,    armservo,             tServoStandard)
#pragma config(Servo,  srvo_S1_C1_2,    servo2,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "JoystickDriver.c"
#include "DriverCM.h"
bool gyroed;

task main()
{
	calibrateGyro(gyro);
	while(true)
	{
		getJoystickSettings(joystick);

		/*Drive code*/
		motor[frontLeft] = joystick.joy1_y1;
		motor[frontRight] = joystick.joy1_y2;
		motor[backLeft] = joystick.joy1_y1;
		motor[backRight] = joystick.joy1_y2;
		if(joystick.joy1_TopHat == 0)
		{
			motor[frontLeft] = 75;
			motor[frontRight] = 75;
			motor[backLeft] = 75;
			motor[backRight] = 75;
		}
		while(joystick.joy1_TopHat == 0)
		{
		getJoystickSettings(joystick);
		if(SensorValue(gyro) > offset)//turning right
		{
			motor[frontRight] = motor[frontRight] + 1;
		}
		if(SensorValue(gyro) < offset)//turning left
		{
			motor[frontLeft] = motor[frontLeft] + 1;
		}
		gyroed = true;
	}
		if(joystick.joy1_TopHat == 4)
		{
			motor[frontLeft] = -75;
			motor[frontRight] = -75;
			motor[backLeft] = -75;
			motor[backRight] = -75;
		}
		while(joystick.joy1_TopHat == 4)
		{
		getJoystickSettings(joystick);
		if(SensorValue(gyro) > offset)//turning right
		{
			motor[frontRight] = motor[frontRight] - 1;
		}
		if(SensorValue(gyro) < offset)//turning left
		{
			motor[frontLeft] = motor[frontLeft] - 1;
		}
		gyroed = true;
		}//end gyro code
		if(gyroed)
		{
			motor[frontLeft] = 1;
			motor[frontRight] = 1;
			motor[backLeft] = 1;
			motor[backRight] = 1;	
			gyroed = false;
			
		}
	}
}
